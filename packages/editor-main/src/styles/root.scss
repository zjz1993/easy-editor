@use "~@easy-editor/styles" as styles;
*{
  margin: 0;
  padding: 0;
}
.easy-editor{
  display: flex;
  flex-direction: column;
  height: 100%;
  background: white;
  box-sizing: border-box;
  &-link{
    cursor: pointer;
  }
  .ProseMirror{
    pre {
      code{
        display: block;
        box-sizing: border-box;
        margin: 0;
        padding: 16px;
        background: none !important;
        overflow: visible;
        font-size: 100%;
        min-width: min-content;
        white-space: inherit !important;
        line-height: 25px;
      }
    }
    p{
      color: styles.$primary-black;
    }
    ol,
    ul {
      //margin-left: 30px;

      li {
        list-style-type: inherit;
        // margin-left: 22px;

        &.align-center {
          justify-content: center;
        }

        &.align-left {
          justify-content: flex-start;
        }

        &.align-right {
          justify-content: flex-end;
        }
      }

      &.check-list {
        list-style-type: none;
        margin-left: 0px;
        padding: 0;

        li {
          display: flex;
          margin-left: 0;

          > label {
            flex: 0 0 auto;
            margin-right: 5px;
            user-select: none;

            input {
              vertical-align: middle;
            }
          }

          input[type='checkbox'] {
            width: 17px;
            height: 17px;
          }

          > div {
            flex: 1 1 auto;
          }
        }
      }
    }
    $max-depth: 11;
    $list-styles: (disc, circle, square);

    @function list-style-type($depth) {
      @return nth($list-styles, ($depth % 3) + 1);
    }

    @mixin ul-list-type-generator($depth: 0) {
      @if $depth < $max-depth {
        ul:not(.check-list) {
          margin-bottom: 0;
          padding-left: 40px;
          list-style-type: list-style-type($depth);
          @include ul-list-type-generator($depth + 1);
        }

        ol {
          padding-left: 10px;
        }
      }
    }

    // 使用示例
    @include ul-list-type-generator();
    li.check-list-item {
      list-style-type: none;
    }
    p[data-first-indent='true'] {
      text-indent: 2em;
    }


    @for $i from 1 through 10 {
      *:not(ul, ol, p)[data-indent='#{$i}'] {
        padding-left: $i * 30px;
        // text-indent: 2em;
      }

      p {
        &[data-indent='#{$i}'] {
          padding-left: 2em * $i;
        }
      }

      ul,
      ol {
        &[data-indent='#{$i}'] {
          padding-left: 40px + ($i - 1) * 30px;
          // padding-left: 0;
        }
      }

      //li {
      //  &[data-indent='#{$i}'] {
      //    margin-left: $i * 30px;
      //    padding-left: 0;
      //  }
      //}
    }
  }
  blockquote {
    border-left: 3px solid rgba(61, 37, 20, .12);
    margin: 1.5rem 0;
    padding-left: 1rem;
  }
  &-body{
    display: flex;
    overflow: auto;
    flex: 1 1;
    word-wrap: break-word;
    width: 100%;
    padding: 8px;
    box-sizing: border-box;
    .tiptap p.is-editor-empty:first-child::before {
      color: #adb5bd;
      content: attr(data-placeholder);
      float: left;
      height: 0;
      pointer-events: none;
    }
    .ProseMirror{
      width: 100%;
      &:focus{
        outline: none;
      }
    }
  }
}
